// #target: macos-x64
module test;
import std;
import libc;

struct Doc { Head *head; }
struct Head { char[]* title; }

struct Summary
{
	char[]* title;
	bool ok;
}

fn void Summary.print(Summary *s, CFile out)
{
	// We don't have a native printf in C3 yet, so use libc,
	// which is not all that nice for the strings but...
	char[] title = s.title ? *s.title : "missing";
	libc::fprintf(out, "Summary({ .title = %.*s, .ok = %s})", (int)title.len, title.ptr, s.ok ? (char*)"true" : (char*)"false");
}

fn bool contains(char[] haystack, char[] needle)
{
	usz len = haystack.len;
	usz needle_len = needle.len;
	if (len < needle_len) return false;
	if (!needle_len) return true;
	len -= needle_len - 1;
	for (usz i = 0; i < len; i++)
	{
		if (libc::memcmp(&haystack[i], needle.ptr, needle_len) == 0)
		{
			return true;
		}
	}
	return false;
}

macro dupe(value)
{
	$typeof(&value) temp = malloc($sizeof(value));
	if (!temp) return ReadError.OUT_OF_MEMORY?;
	*temp = value;
	return temp;
}

fault ReadError
{
	BAD_READ,
	OUT_OF_MEMORY
}

fn Doc! readDoc(char[] url)
{
	if (contains(url, "fail")) return ReadError.BAD_READ?;
	if (contains(url, "head-missing")) return { .head = null };
	if (contains(url, "title-missing")) return { dupe(Head { .title = null })! };
	if (contains(url, "title-empty")) return { dupe(Head { .title = dupe((char[])"")! })! };
	// Not particularly elegant due to missing string functions.
	int len = libc::snprintf(null, 0, "Title of %.*s", (int)url.len, url.ptr);
	char* str = malloc(len + 1);
	if (!str) return ReadError.OUT_OF_MEMORY?;
	libc::snprintf(str, len + 1, "Title of %.*s", (int)url.len, url.ptr);
	return { dupe(Head { .title = dupe(str[..len - 1])! })! };
}

fn Summary buildSummary(Doc doc)
{
    return Summary {
        .title = doc.head ? doc.head.title : null,
        .ok = true,
    };
}

fn Summary readAndBuildSummary(char[] url)
{
	return buildSummary(readDoc(url)) ?? Summary { .title = null, .ok = false };
	/*
	// or
	Summary summary = buildSummary(readDoc(url));
	if (catch summary) return Summary { .title = null, .ok = false };
	return summary;
	// or
	Summary summary = buildSummary(readDoc(url));
	if (try summary) return summary;
	return Summary { .title = null, .ok = false };
	*/
}


fault TitleResult
{
	TITLE_MISSING
}

fn bool! isTitleNonEmpty(Doc doc)
{
	if (!doc.head) return TitleResult.TITLE_MISSING?;
	char[]* head = doc.head.title;
	if (!head) return TitleResult.TITLE_MISSING?;
	return (*head).len > 0;
}


fn bool! readWhetherTitleNonEmpty(char[] url)
{
    return isTitleNonEmpty(readDoc(url));
}

fn char* bool_to_string(bool b)
{
	return b ? "true" : "false";
}
fn char* nameFromError(anyerr e)
{
	switch (e)
	{
		case TitleResult.TITLE_MISSING:
			return "no title";
		case ReadError.BAD_READ:
			return "bad read";
		case ReadError.OUT_OF_MEMORY:
			return "out of memory";
		default:
			return "unknown error";
	}
}


fn void main()
{
    const char[][] URLS = { "good", "title-empty", "title-missing", "head-missing", "fail" };
    foreach (char[] url : URLS)
    {
        // Yes, it's pretty onerous to print strings for the moment in C3
        libc::printf(`Checking "https://%.*s/":` "\n", (int)url.len, url.ptr);
        Summary summary = readAndBuildSummary(url);
        libc::printf("  Summary: ");
        summary.print(libc::stdout());
        libc::printf("\n");
        char[] title_sure = summary.title ? *summary.title : "";
        libc::printf("  Title: %.*s\n", (int)title_sure.len, title_sure.ptr);
        bool! has_title = readWhetherTitleNonEmpty(url);
        // This looks a bit less than elegant, but as you see it's mostly due to having to
        // use printf here.
        libc::printf("  Has title: %s vs %s\n", bool_to_string(has_title) ?? nameFromError(catch? has_title), (has_title ?? false) ? (char*)"true" : (char*)"false");
    }
}

/* #expect: test.ll

define void @test.Summary.print(ptr %0, ptr %1) #0 {
entry:
  %title = alloca %"char[]", align 8
  %2 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %ptrbool = icmp ne ptr %3, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %entry
  %4 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = load %"char[]", ptr %5, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %entry
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %"char[]" [ %6, %cond.lhs ], [ { ptr @.str.41, i64 7 }, %cond.rhs ]
  store %"char[]" %val, ptr %title, align 8
  %7 = getelementptr inbounds %"char[]", ptr %title, i32 0, i32 1
  %8 = load i64, ptr %7, align 8
  %trunc = trunc i64 %8 to i32
  %9 = getelementptr inbounds %"char[]", ptr %title, i32 0, i32 0
  %10 = load ptr, ptr %9, align 8
  %11 = getelementptr inbounds %Summary, ptr %0, i32 0, i32 1
  %12 = load i8, ptr %11, align 8
  %13 = trunc i8 %12 to i1
  %ternary = select i1 %13, ptr @.str.43, ptr @.str.44
  %14 = call i32 (ptr, ptr, ...) @fprintf(ptr %1, ptr @.str.42, i32 %trunc, ptr %10, ptr %ternary)
  ret void
}

; Function Attrs: nounwind
define zeroext i8 @test.contains(ptr %0, i64 %1, ptr %2, i64 %3) #0 {
entry:
  %haystack = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %needle_len = alloca i64, align 8
  %i = alloca i64, align 8
  store ptr %0, ptr %haystack, align 8
  %ptroffset = getelementptr inbounds i64, ptr %haystack, i64 1
  store i64 %1, ptr %ptroffset, align 8
  store ptr %2, ptr %needle, align 8
  %ptroffset1 = getelementptr inbounds i64, ptr %needle, i64 1
  store i64 %3, ptr %ptroffset1, align 8
  %4 = getelementptr inbounds %"char[]", ptr %haystack, i32 0, i32 1
  %5 = load i64, ptr %4, align 8
  store i64 %5, ptr %len, align 8
  %6 = getelementptr inbounds %"char[]", ptr %needle, i32 0, i32 1
  %7 = load i64, ptr %6, align 8
  store i64 %7, ptr %needle_len, align 8
  %8 = load i64, ptr %len, align 8
  %9 = load i64, ptr %needle_len, align 8
  %lt = icmp ult i64 %8, %9
  br i1 %lt, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i8 0

if.exit:                                          ; preds = %entry
  %10 = load i64, ptr %needle_len, align 8
  %not = icmp eq i64 %10, 0
  br i1 %not, label %if.then2, label %if.exit3

if.then2:                                         ; preds = %if.exit
  ret i8 1

if.exit3:                                         ; preds = %if.exit
  %11 = load i64, ptr %len, align 8
  %12 = load i64, ptr %needle_len, align 8
  %sub = sub i64 %12, 1
  %sub4 = sub i64 %11, %sub
  store i64 %sub4, ptr %len, align 8
  store i64 0, ptr %i, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %if.exit8, %if.exit3
  %13 = load i64, ptr %i, align 8
  %14 = load i64, ptr %len, align 8
  %lt5 = icmp ult i64 %13, %14
  br i1 %lt5, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %15 = getelementptr inbounds %"char[]", ptr %haystack, i32 0, i32 0
  %16 = load ptr, ptr %15, align 8
  %17 = load i64, ptr %i, align 8
  %ptroffset6 = getelementptr inbounds i8, ptr %16, i64 %17
  %18 = getelementptr inbounds %"char[]", ptr %needle, i32 0, i32 0
  %19 = load ptr, ptr %18, align 8
  %20 = load i64, ptr %needle_len, align 8
  %21 = call i32 @memcmp(ptr %ptroffset6, ptr %19, i64 %20)
  %eq = icmp eq i32 %21, 0
  br i1 %eq, label %if.then7, label %if.exit8

if.then7:                                         ; preds = %loop.body
  ret i8 1

if.exit8:                                         ; preds = %loop.body
  %22 = load i64, ptr %i, align 8
  %add = add i64 %22, 1
  store i64 %add, ptr %i, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret i8 0
}

; Function Attrs: nounwind
define i64 @test.readDoc(ptr %0, ptr %1, i64 %2) #0 {
entry:
  %url = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %literal = alloca %Doc, align 8
  %reterr8 = alloca i64, align 8
  %literal9 = alloca %Doc, align 8
  %error_var = alloca i64, align 8
  %value = alloca %Head, align 8
  %literal10 = alloca %Head, align 8
  %temp = alloca ptr, align 8
  %using = alloca ptr, align 8
  %end_padding = alloca i64, align 8
  %error_var13 = alloca i64, align 8
  %using14 = alloca ptr, align 8
  %end_padding15 = alloca i64, align 8
  %.anon = alloca i64, align 8
  %blockret16 = alloca ptr, align 8
  %retparam = alloca ptr, align 8
  %varargslots = alloca [1 x %variant], align 16
  %indirectarg = alloca %"variant[]", align 8
  %reterr24 = alloca i64, align 8
  %literal25 = alloca %Doc, align 8
  %error_var26 = alloca i64, align 8
  %value27 = alloca %Head, align 8
  %literal28 = alloca %Head, align 8
  %error_var29 = alloca i64, align 8
  %value30 = alloca %"char[]", align 8
  %temp31 = alloca ptr, align 8
  %using32 = alloca ptr, align 8
  %end_padding34 = alloca i64, align 8
  %error_var36 = alloca i64, align 8
  %using37 = alloca ptr, align 8
  %end_padding38 = alloca i64, align 8
  %.anon39 = alloca i64, align 8
  %blockret40 = alloca ptr, align 8
  %retparam41 = alloca ptr, align 8
  %varargslots48 = alloca [1 x %variant], align 16
  %indirectarg49 = alloca %"variant[]", align 8
  %temp56 = alloca ptr, align 8
  %using57 = alloca ptr, align 8
  %end_padding59 = alloca i64, align 8
  %error_var61 = alloca i64, align 8
  %using62 = alloca ptr, align 8
  %end_padding63 = alloca i64, align 8
  %.anon64 = alloca i64, align 8
  %blockret65 = alloca ptr, align 8
  %retparam66 = alloca ptr, align 8
  %varargslots73 = alloca [1 x %variant], align 16
  %indirectarg74 = alloca %"variant[]", align 8
  %len = alloca i32, align 4
  %str = alloca ptr, align 8
  %using82 = alloca ptr, align 8
  %end_padding83 = alloca i64, align 8
  %error_var84 = alloca i64, align 8
  %using85 = alloca ptr, align 8
  %end_padding86 = alloca i64, align 8
  %.anon87 = alloca i32, align 4
  %blockret89 = alloca ptr, align 8
  %retparam90 = alloca ptr, align 8
  %varargslots97 = alloca [1 x %variant], align 16
  %indirectarg98 = alloca %"variant[]", align 8
  %reterr106 = alloca i64, align 8
  %literal107 = alloca %Doc, align 8
  %error_var108 = alloca i64, align 8
  %value109 = alloca %Head, align 8
  %literal110 = alloca %Head, align 8
  %error_var111 = alloca i64, align 8
  %value112 = alloca %"char[]", align 8
  %temp115 = alloca ptr, align 8
  %using116 = alloca ptr, align 8
  %end_padding118 = alloca i64, align 8
  %error_var120 = alloca i64, align 8
  %using121 = alloca ptr, align 8
  %end_padding122 = alloca i64, align 8
  %.anon123 = alloca i64, align 8
  %blockret124 = alloca ptr, align 8
  %retparam125 = alloca ptr, align 8
  %varargslots132 = alloca [1 x %variant], align 16
  %indirectarg133 = alloca %"variant[]", align 8
  %temp140 = alloca ptr, align 8
  %using141 = alloca ptr, align 8
  %end_padding143 = alloca i64, align 8
  %error_var145 = alloca i64, align 8
  %using146 = alloca ptr, align 8
  %end_padding147 = alloca i64, align 8
  %.anon148 = alloca i64, align 8
  %blockret149 = alloca ptr, align 8
  %retparam150 = alloca ptr, align 8
  %varargslots157 = alloca [1 x %variant], align 16
  %indirectarg158 = alloca %"variant[]", align 8
  store ptr %1, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %3, align 8
  %4 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %4, align 8
  %5 = call i8 @test.contains(ptr %lo, i64 %hi, ptr @.str, i64 4)
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"test.ReadError$BAD_READ" to i64)

if.exit:                                          ; preds = %entry
  %7 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo1 = load ptr, ptr %7, align 8
  %8 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi2 = load i64, ptr %8, align 8
  %9 = call i8 @test.contains(ptr %lo1, i64 %hi2, ptr @.str.3, i64 12)
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then3, label %if.exit4

if.then3:                                         ; preds = %if.exit
  %11 = getelementptr inbounds %Doc, ptr %literal, i32 0, i32 0
  store ptr null, ptr %11, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 8, i1 false)
  ret i64 0

if.exit4:                                         ; preds = %if.exit
  %12 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo5 = load ptr, ptr %12, align 8
  %13 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi6 = load i64, ptr %13, align 8
  %14 = call i8 @test.contains(ptr %lo5, i64 %hi6, ptr @.str.4, i64 13)
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then7, label %if.exit20

if.then7:                                         ; preds = %if.exit4
  %16 = getelementptr inbounds %Doc, ptr %literal9, i32 0, i32 0
  %17 = getelementptr inbounds %Head, ptr %literal10, i32 0, i32 0
  store ptr null, ptr %17, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %literal10, i32 8, i1 false)
  %18 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %18, ptr %using, align 8
  store i64 0, ptr %end_padding, align 8
  %19 = load ptr, ptr %using, align 8
  store ptr %19, ptr %using14, align 8
  %20 = load i64, ptr %end_padding, align 8
  store i64 %20, ptr %end_padding15, align 8
  store i64 8, ptr %.anon, align 8
  %21 = load ptr, ptr %using14, align 8
  %22 = load i64, ptr %.anon, align 8
  %23 = load i64, ptr %end_padding15, align 8
  %add = add i64 %22, %23
  %24 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam, ptr %21, i64 %add) #3
  %not_err = icmp eq i64 %24, 0
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %25, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %if.then7
  store i64 %24, ptr %error_var13, align 8
  br label %panic_block

after_check:                                      ; preds = %if.then7
  %26 = load ptr, ptr %retparam, align 8
  store ptr %26, ptr %blockret16, align 8
  br label %expr_block.exit

expr_block.exit:                                  ; preds = %after_check
  %27 = load ptr, ptr %blockret16, align 8
  br label %noerr_block

panic_block:                                      ; preds = %assign_optional
  %28 = insertvalue %variant undef, ptr %error_var13, 0
  %29 = insertvalue %variant %28, i64 ptrtoint (ptr @"$ct.anyerr" to i64), 1
  %30 = getelementptr inbounds [1 x %variant], ptr %varargslots, i64 0, i64 0
  store %variant %29, ptr %30, align 16
  %31 = insertvalue %"variant[]" undef, ptr %varargslots, 0
  %32 = insertvalue %"variant[]" %31, i64 1, 1
  store %"variant[]" %32, ptr %indirectarg, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr @.panic_msg, i64 36, ptr @.file, i64 6, ptr @.func, i64 7, i32 200, ptr byval(%"variant[]") align 8 %indirectarg)
  unreachable

noerr_block:                                      ; preds = %expr_block.exit
  store ptr %27, ptr %temp, align 8
  %34 = load ptr, ptr %temp, align 8
  %not = icmp eq ptr %34, null
  br i1 %not, label %if.then17, label %if.exit18

if.then17:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var, align 8
  br label %guard_block

if.exit18:                                        ; preds = %noerr_block
  %35 = load ptr, ptr %temp, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %35, ptr align 8 %value, i32 8, i1 false)
  br label %noerr_block19

guard_block:                                      ; preds = %if.then17
  %36 = load i64, ptr %error_var, align 8
  ret i64 %36

noerr_block19:                                    ; preds = %if.exit18
  %37 = load ptr, ptr %temp, align 8
  store ptr %37, ptr %16, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal9, i32 8, i1 false)
  ret i64 0

if.exit20:                                        ; preds = %if.exit4
  %38 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo21 = load ptr, ptr %38, align 8
  %39 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi22 = load i64, ptr %39, align 8
  %40 = call i8 @test.contains(ptr %lo21, i64 %hi22, ptr @.str.5, i64 11)
  %41 = trunc i8 %40 to i1
  br i1 %41, label %if.then23, label %if.exit81

if.then23:                                        ; preds = %if.exit20
  %42 = getelementptr inbounds %Doc, ptr %literal25, i32 0, i32 0
  store ptr null, ptr %literal28, align 8
  %43 = getelementptr inbounds %Head, ptr %literal28, i32 0, i32 0
  store %"char[]" zeroinitializer, ptr %value30, align 8
  %44 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %44, ptr %using32, align 8
  store i64 0, ptr %end_padding34, align 8
  %45 = load ptr, ptr %using32, align 8
  store ptr %45, ptr %using37, align 8
  %46 = load i64, ptr %end_padding34, align 8
  store i64 %46, ptr %end_padding38, align 8
  store i64 16, ptr %.anon39, align 8
  %47 = load ptr, ptr %using37, align 8
  %48 = load i64, ptr %.anon39, align 8
  %49 = load i64, ptr %end_padding38, align 8
  %add42 = add i64 %48, %49
  %50 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam41, ptr %47, i64 %add42) #3
  %not_err43 = icmp eq i64 %50, 0
  %51 = call i1 @llvm.expect.i1(i1 %not_err43, i1 true)
  br i1 %51, label %after_check45, label %assign_optional44

assign_optional44:                                ; preds = %if.then23
  store i64 %50, ptr %error_var36, align 8
  br label %panic_block47

after_check45:                                    ; preds = %if.then23
  %52 = load ptr, ptr %retparam41, align 8
  store ptr %52, ptr %blockret40, align 8
  br label %expr_block.exit46

expr_block.exit46:                                ; preds = %after_check45
  %53 = load ptr, ptr %blockret40, align 8
  br label %noerr_block50

panic_block47:                                    ; preds = %assign_optional44
  %54 = insertvalue %variant undef, ptr %error_var36, 0
  %55 = insertvalue %variant %54, i64 ptrtoint (ptr @"$ct.anyerr" to i64), 1
  %56 = getelementptr inbounds [1 x %variant], ptr %varargslots48, i64 0, i64 0
  store %variant %55, ptr %56, align 16
  %57 = insertvalue %"variant[]" undef, ptr %varargslots48, 0
  %58 = insertvalue %"variant[]" %57, i64 1, 1
  store %"variant[]" %58, ptr %indirectarg49, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr @.panic_msg.6, i64 36, ptr @.file.7, i64 6, ptr @.func.8, i64 7, i32 200, ptr byval(%"variant[]") align 8 %indirectarg49)
  unreachable

noerr_block50:                                    ; preds = %expr_block.exit46
  store ptr %53, ptr %temp31, align 8
  %60 = load ptr, ptr %temp31, align 8
  %not51 = icmp eq ptr %60, null
  br i1 %not51, label %if.then52, label %if.exit53

if.then52:                                        ; preds = %noerr_block50
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var29, align 8
  br label %guard_block54

if.exit53:                                        ; preds = %noerr_block50
  %61 = load ptr, ptr %temp31, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %61, ptr align 8 %value30, i32 16, i1 false)
  br label %noerr_block55

guard_block54:                                    ; preds = %if.then52
  %62 = load i64, ptr %error_var29, align 8
  ret i64 %62

noerr_block55:                                    ; preds = %if.exit53
  %63 = load ptr, ptr %temp31, align 8
  store ptr %63, ptr %43, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value27, ptr align 8 %literal28, i32 8, i1 false)
  %64 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %64, ptr %using57, align 8
  store i64 0, ptr %end_padding59, align 8
  %65 = load ptr, ptr %using57, align 8
  store ptr %65, ptr %using62, align 8
  %66 = load i64, ptr %end_padding59, align 8
  store i64 %66, ptr %end_padding63, align 8
  store i64 8, ptr %.anon64, align 8
  %67 = load ptr, ptr %using62, align 8
  %68 = load i64, ptr %.anon64, align 8
  %69 = load i64, ptr %end_padding63, align 8
  %add67 = add i64 %68, %69
  %70 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam66, ptr %67, i64 %add67) #3
  %not_err68 = icmp eq i64 %70, 0
  %71 = call i1 @llvm.expect.i1(i1 %not_err68, i1 true)
  br i1 %71, label %after_check70, label %assign_optional69

assign_optional69:                                ; preds = %noerr_block55
  store i64 %70, ptr %error_var61, align 8
  br label %panic_block72

after_check70:                                    ; preds = %noerr_block55
  %72 = load ptr, ptr %retparam66, align 8
  store ptr %72, ptr %blockret65, align 8
  br label %expr_block.exit71

expr_block.exit71:                                ; preds = %after_check70
  %73 = load ptr, ptr %blockret65, align 8
  br label %noerr_block75

panic_block72:                                    ; preds = %assign_optional69
  %74 = insertvalue %variant undef, ptr %error_var61, 0
  %75 = insertvalue %variant %74, i64 ptrtoint (ptr @"$ct.anyerr" to i64), 1
  %76 = getelementptr inbounds [1 x %variant], ptr %varargslots73, i64 0, i64 0
  store %variant %75, ptr %76, align 16
  %77 = insertvalue %"variant[]" undef, ptr %varargslots73, 0
  %78 = insertvalue %"variant[]" %77, i64 1, 1
  store %"variant[]" %78, ptr %indirectarg74, align 8
  %79 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %79(ptr @.panic_msg.9, i64 36, ptr @.file.10, i64 6, ptr @.func.11, i64 7, i32 200, ptr byval(%"variant[]") align 8 %indirectarg74)
  unreachable

noerr_block75:                                    ; preds = %expr_block.exit71
  store ptr %73, ptr %temp56, align 8
  %80 = load ptr, ptr %temp56, align 8
  %not76 = icmp eq ptr %80, null
  br i1 %not76, label %if.then77, label %if.exit78

if.then77:                                        ; preds = %noerr_block75
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var26, align 8
  br label %guard_block79

if.exit78:                                        ; preds = %noerr_block75
  %81 = load ptr, ptr %temp56, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %81, ptr align 8 %value27, i32 8, i1 false)
  br label %noerr_block80

guard_block79:                                    ; preds = %if.then77
  %82 = load i64, ptr %error_var26, align 8
  ret i64 %82

noerr_block80:                                    ; preds = %if.exit78
  %83 = load ptr, ptr %temp56, align 8
  store ptr %83, ptr %42, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal25, i32 8, i1 false)
  ret i64 0

if.exit81:                                        ; preds = %if.exit20
  %84 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %85 = load i64, ptr %84, align 8
  %trunc = trunc i64 %85 to i32
  %86 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %87 = load ptr, ptr %86, align 8
  %88 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr null, i64 0, ptr @.str.12, i32 %trunc, ptr %87)
  store i32 %88, ptr %len, align 4
  %89 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %89, ptr %using82, align 8
  store i64 0, ptr %end_padding83, align 8
  %90 = load ptr, ptr %using82, align 8
  store ptr %90, ptr %using85, align 8
  %91 = load i64, ptr %end_padding83, align 8
  store i64 %91, ptr %end_padding86, align 8
  %92 = load i32, ptr %len, align 4
  %add88 = add i32 %92, 1
  store i32 %add88, ptr %.anon87, align 4
  %93 = load ptr, ptr %using85, align 8
  %94 = load i32, ptr %.anon87, align 4
  %sext = sext i32 %94 to i64
  %95 = load i64, ptr %end_padding86, align 8
  %add91 = add i64 %sext, %95
  %96 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam90, ptr %93, i64 %add91) #3
  %not_err92 = icmp eq i64 %96, 0
  %97 = call i1 @llvm.expect.i1(i1 %not_err92, i1 true)
  br i1 %97, label %after_check94, label %assign_optional93

assign_optional93:                                ; preds = %if.exit81
  store i64 %96, ptr %error_var84, align 8
  br label %panic_block96

after_check94:                                    ; preds = %if.exit81
  %98 = load ptr, ptr %retparam90, align 8
  store ptr %98, ptr %blockret89, align 8
  br label %expr_block.exit95

expr_block.exit95:                                ; preds = %after_check94
  %99 = load ptr, ptr %blockret89, align 8
  br label %noerr_block99

panic_block96:                                    ; preds = %assign_optional93
  %100 = insertvalue %variant undef, ptr %error_var84, 0
  %101 = insertvalue %variant %100, i64 ptrtoint (ptr @"$ct.anyerr" to i64), 1
  %102 = getelementptr inbounds [1 x %variant], ptr %varargslots97, i64 0, i64 0
  store %variant %101, ptr %102, align 16
  %103 = insertvalue %"variant[]" undef, ptr %varargslots97, 0
  %104 = insertvalue %"variant[]" %103, i64 1, 1
  store %"variant[]" %104, ptr %indirectarg98, align 8
  %105 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %105(ptr @.panic_msg.13, i64 36, ptr @.file.14, i64 6, ptr @.func.15, i64 7, i32 200, ptr byval(%"variant[]") align 8 %indirectarg98)
  unreachable

noerr_block99:                                    ; preds = %expr_block.exit95
  store ptr %99, ptr %str, align 8
  %106 = load ptr, ptr %str, align 8
  %not100 = icmp eq ptr %106, null
  br i1 %not100, label %if.then101, label %if.exit102

if.then101:                                       ; preds = %noerr_block99
  ret i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64)

if.exit102:                                       ; preds = %noerr_block99
  %107 = load ptr, ptr %str, align 8
  %108 = load i32, ptr %len, align 4
  %sext103 = sext i32 %108 to i64
  %add104 = add i64 %sext103, 1
  %109 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %110 = load i64, ptr %109, align 8
  %trunc105 = trunc i64 %110 to i32
  %111 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %112 = load ptr, ptr %111, align 8
  %113 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr %107, i64 %add104, ptr @.str.16, i32 %trunc105, ptr %112)
  %114 = getelementptr inbounds %Doc, ptr %literal107, i32 0, i32 0
  store ptr null, ptr %literal110, align 8
  %115 = getelementptr inbounds %Head, ptr %literal110, i32 0, i32 0
  %116 = load ptr, ptr %str, align 8
  %117 = load i32, ptr %len, align 4
  %sub = sub i32 %117, 1
  %sext113 = sext i32 %sub to i64
  %118 = add i64 %sext113, 1
  %size = sub i64 %118, 0
  %ptroffset114 = getelementptr inbounds i8, ptr %116, i64 0
  %119 = insertvalue %"char[]" undef, ptr %ptroffset114, 0
  %120 = insertvalue %"char[]" %119, i64 %size, 1
  store %"char[]" %120, ptr %value112, align 8
  %121 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %121, ptr %using116, align 8
  store i64 0, ptr %end_padding118, align 8
  %122 = load ptr, ptr %using116, align 8
  store ptr %122, ptr %using121, align 8
  %123 = load i64, ptr %end_padding118, align 8
  store i64 %123, ptr %end_padding122, align 8
  store i64 16, ptr %.anon123, align 8
  %124 = load ptr, ptr %using121, align 8
  %125 = load i64, ptr %.anon123, align 8
  %126 = load i64, ptr %end_padding122, align 8
  %add126 = add i64 %125, %126
  %127 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam125, ptr %124, i64 %add126) #3
  %not_err127 = icmp eq i64 %127, 0
  %128 = call i1 @llvm.expect.i1(i1 %not_err127, i1 true)
  br i1 %128, label %after_check129, label %assign_optional128

assign_optional128:                               ; preds = %if.exit102
  store i64 %127, ptr %error_var120, align 8
  br label %panic_block131

after_check129:                                   ; preds = %if.exit102
  %129 = load ptr, ptr %retparam125, align 8
  store ptr %129, ptr %blockret124, align 8
  br label %expr_block.exit130

expr_block.exit130:                               ; preds = %after_check129
  %130 = load ptr, ptr %blockret124, align 8
  br label %noerr_block134

panic_block131:                                   ; preds = %assign_optional128
  %131 = insertvalue %variant undef, ptr %error_var120, 0
  %132 = insertvalue %variant %131, i64 ptrtoint (ptr @"$ct.anyerr" to i64), 1
  %133 = getelementptr inbounds [1 x %variant], ptr %varargslots132, i64 0, i64 0
  store %variant %132, ptr %133, align 16
  %134 = insertvalue %"variant[]" undef, ptr %varargslots132, 0
  %135 = insertvalue %"variant[]" %134, i64 1, 1
  store %"variant[]" %135, ptr %indirectarg133, align 8
  %136 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %136(ptr @.panic_msg.17, i64 36, ptr @.file.18, i64 6, ptr @.func.19, i64 7, i32 200, ptr byval(%"variant[]") align 8 %indirectarg133)
  unreachable

noerr_block134:                                   ; preds = %expr_block.exit130
  store ptr %130, ptr %temp115, align 8
  %137 = load ptr, ptr %temp115, align 8
  %not135 = icmp eq ptr %137, null
  br i1 %not135, label %if.then136, label %if.exit137

if.then136:                                       ; preds = %noerr_block134
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var111, align 8
  br label %guard_block138

if.exit137:                                       ; preds = %noerr_block134
  %138 = load ptr, ptr %temp115, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %138, ptr align 8 %value112, i32 16, i1 false)
  br label %noerr_block139

guard_block138:                                   ; preds = %if.then136
  %139 = load i64, ptr %error_var111, align 8
  ret i64 %139

noerr_block139:                                   ; preds = %if.exit137
  %140 = load ptr, ptr %temp115, align 8
  store ptr %140, ptr %115, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value109, ptr align 8 %literal110, i32 8, i1 false)
  %141 = load ptr, ptr @std.core.mem.thread_allocator, align 8
  store ptr %141, ptr %using141, align 8
  store i64 0, ptr %end_padding143, align 8
  %142 = load ptr, ptr %using141, align 8
  store ptr %142, ptr %using146, align 8
  %143 = load i64, ptr %end_padding143, align 8
  store i64 %143, ptr %end_padding147, align 8
  store i64 8, ptr %.anon148, align 8
  %144 = load ptr, ptr %using146, align 8
  %145 = load i64, ptr %.anon148, align 8
  %146 = load i64, ptr %end_padding147, align 8
  %add151 = add i64 %145, %146
  %147 = call i64 @std.core.mem.allocator.Allocator.alloc(ptr %retparam150, ptr %144, i64 %add151) #3
  %not_err152 = icmp eq i64 %147, 0
  %148 = call i1 @llvm.expect.i1(i1 %not_err152, i1 true)
  br i1 %148, label %after_check154, label %assign_optional153

assign_optional153:                               ; preds = %noerr_block139
  store i64 %147, ptr %error_var145, align 8
  br label %panic_block156

after_check154:                                   ; preds = %noerr_block139
  %149 = load ptr, ptr %retparam150, align 8
  store ptr %149, ptr %blockret149, align 8
  br label %expr_block.exit155

expr_block.exit155:                               ; preds = %after_check154
  %150 = load ptr, ptr %blockret149, align 8
  br label %noerr_block159

panic_block156:                                   ; preds = %assign_optional153
  %151 = insertvalue %variant undef, ptr %error_var145, 0
  %152 = insertvalue %variant %151, i64 ptrtoint (ptr @"$ct.anyerr" to i64), 1
  %153 = getelementptr inbounds [1 x %variant], ptr %varargslots157, i64 0, i64 0
  store %variant %152, ptr %153, align 16
  %154 = insertvalue %"variant[]" undef, ptr %varargslots157, 0
  %155 = insertvalue %"variant[]" %154, i64 1, 1
  store %"variant[]" %155, ptr %indirectarg158, align 8
  %156 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %156(ptr @.panic_msg.20, i64 36, ptr @.file.21, i64 6, ptr @.func.22, i64 7, i32 200, ptr byval(%"variant[]") align 8 %indirectarg158)
  unreachable

noerr_block159:                                   ; preds = %expr_block.exit155
  store ptr %150, ptr %temp140, align 8
  %157 = load ptr, ptr %temp140, align 8
  %not160 = icmp eq ptr %157, null
  br i1 %not160, label %if.then161, label %if.exit162

if.then161:                                       ; preds = %noerr_block159
  store i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), ptr %error_var108, align 8
  br label %guard_block163

if.exit162:                                       ; preds = %noerr_block159
  %158 = load ptr, ptr %temp140, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %158, ptr align 8 %value109, i32 8, i1 false)
  br label %noerr_block164

guard_block163:                                   ; preds = %if.then161
  %159 = load i64, ptr %error_var108, align 8
  ret i64 %159

noerr_block164:                                   ; preds = %if.exit162
  %160 = load ptr, ptr %temp140, align 8
  store ptr %160, ptr %114, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal107, i32 8, i1 false)
  ret i64 0
}

; Function Attrs: nounwind
define { ptr, i8 } @test.buildSummary(ptr %0) #0 {
entry:
  %doc = alloca %Doc, align 8
  %literal = alloca %Summary, align 8
  store ptr %0, ptr %doc, align 8
  %1 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  store ptr null, ptr %1, align 8
  %2 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 0, ptr %2, align 8
  %3 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  %4 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %ptrbool = icmp ne ptr %5, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %entry
  %6 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr inbounds %Head, ptr %7, i32 0, i32 0
  %9 = load ptr, ptr %8, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %entry
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi ptr [ %9, %cond.lhs ], [ null, %cond.rhs ]
  store ptr %val, ptr %3, align 8
  %10 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 1, ptr %10, align 8
  %11 = load { ptr, i8 }, ptr %literal, align 8
  ret { ptr, i8 } %11
}

; Function Attrs: nounwind
define { ptr, i8 } @test.readAndBuildSummary(ptr %0, i64 %1) #0 {
entry:
  %url = alloca %"char[]", align 8
  %retparam = alloca %Doc, align 8
  %result = alloca %Summary, align 8
  %literal = alloca %Summary, align 8
  %taddr = alloca %Summary, align 8
  store ptr %0, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %1, ptr %ptroffset, align 8
  %2 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %2, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %3, align 8
  %4 = call i64 @test.readDoc(ptr %retparam, ptr %lo, i64 %hi)
  %not_err = icmp eq i64 %4, 0
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %5, label %after_check, label %else_block

after_check:                                      ; preds = %entry
  %6 = load ptr, ptr %retparam, align 8
  %7 = call { ptr, i8 } @test.buildSummary(ptr %6)
  store { ptr, i8 } %7, ptr %result, align 8
  %8 = load %Summary, ptr %result, align 8
  br label %phi_block

else_block:                                       ; preds = %entry
  %9 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 0
  store ptr null, ptr %9, align 8
  %10 = getelementptr inbounds %Summary, ptr %literal, i32 0, i32 1
  store i8 0, ptr %10, align 8
  %11 = load %Summary, ptr %literal, align 8
  br label %phi_block

phi_block:                                        ; preds = %else_block, %after_check
  %val = phi %Summary [ %8, %after_check ], [ %11, %else_block ]
  store %Summary %val, ptr %taddr, align 8
  %12 = load { ptr, i8 }, ptr %taddr, align 8
  ret { ptr, i8 } %12
}

; Function Attrs: nounwind
define i64 @test.isTitleNonEmpty(ptr %0, ptr %1) #0 {
entry:
  %doc = alloca %Doc, align 8
  %head = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %doc, align 8
  %2 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %3 = load ptr, ptr %2, align 8
  %not = icmp eq ptr %3, null
  br i1 %not, label %if.then, label %if.exit

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64)

if.exit:                                          ; preds = %entry
  %4 = getelementptr inbounds %Doc, ptr %doc, i32 0, i32 0
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr inbounds %Head, ptr %5, i32 0, i32 0
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %head, align 8
  %8 = load ptr, ptr %head, align 8
  %not1 = icmp eq ptr %8, null
  br i1 %not1, label %if.then2, label %if.exit3

if.then2:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64)

if.exit3:                                         ; preds = %if.exit
  %9 = load ptr, ptr %head, align 8
  %10 = getelementptr inbounds %"char[]", ptr %9, i32 0, i32 1
  %11 = load i64, ptr %10, align 8
  %lt = icmp ult i64 0, %11
  %12 = zext i1 %lt to i8
  store i8 %12, ptr %0, align 1
  ret i64 0
}

; Function Attrs: nounwind
define i64 @test.readWhetherTitleNonEmpty(ptr %0, ptr %1, i64 %2) #0 {
entry:
  %url = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i8, align 1
  %retparam1 = alloca %Doc, align 8
  store ptr %1, ptr %url, align 8
  %ptroffset = getelementptr inbounds i64, ptr %url, i64 1
  store i64 %2, ptr %ptroffset, align 8
  %3 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %3, align 8
  %4 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %4, align 8
  %5 = call i64 @test.readDoc(ptr %retparam1, ptr %lo, i64 %hi)
  %not_err = icmp eq i64 %5, 0
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %6, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8
  br label %err_retblock

after_check:                                      ; preds = %entry
  %7 = load ptr, ptr %retparam1, align 8
  %8 = call i64 @test.isTitleNonEmpty(ptr %retparam, ptr %7)
  %not_err2 = icmp eq i64 %8, 0
  %9 = call i1 @llvm.expect.i1(i1 %not_err2, i1 true)
  br i1 %9, label %after_check4, label %assign_optional3

assign_optional3:                                 ; preds = %after_check
  store i64 %8, ptr %reterr, align 8
  br label %err_retblock

after_check4:                                     ; preds = %after_check
  %10 = load i8, ptr %retparam, align 1
  store i8 %10, ptr %0, align 1
  ret i64 0

err_retblock:                                     ; preds = %assign_optional3, %assign_optional
  %11 = load i64, ptr %reterr, align 8
  ret i64 %11
}

; Function Attrs: nounwind
define ptr @test.bool_to_string(i8 zeroext %0) #0 {
entry:
  %1 = trunc i8 %0 to i1
  %ternary = select i1 %1, %"char[]" { ptr @.str.23, i64 4 }, %"char[]" { ptr @.str.24, i64 5 }
  %2 = extractvalue %"char[]" %ternary, 0
  ret ptr %2
}

; Function Attrs: nounwind
define ptr @test.nameFromError(i64 %0) #0 {
entry:
  %switch = alloca i64, align 8
  store i64 %0, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %1 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"test.TitleResult$TITLE_MISSING" to i64), %1
  br i1 %eq, label %switch.case, label %next_if

switch.case:                                      ; preds = %switch.entry
  ret ptr @.str.25

next_if:                                          ; preds = %switch.entry
  %eq1 = icmp eq i64 ptrtoint (ptr @"test.ReadError$BAD_READ" to i64), %1
  br i1 %eq1, label %switch.case2, label %next_if3

switch.case2:                                     ; preds = %next_if
  ret ptr @.str.26

next_if3:                                         ; preds = %next_if
  %eq4 = icmp eq i64 ptrtoint (ptr @"test.ReadError$OUT_OF_MEMORY" to i64), %1
  br i1 %eq4, label %switch.case5, label %next_if6

switch.case5:                                     ; preds = %next_if3
  ret ptr @.str.27

next_if6:                                         ; preds = %next_if3
  br label %switch.default

switch.default:                                   ; preds = %next_if6
  ret ptr @.str.28
}

; Function Attrs: nounwind
define void @test.main() #0 {
entry:
  %URLS = alloca %"char[][]", align 8
  %literal = alloca [5 x %"char[]"], align 16
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %url = alloca %"char[]", align 8
  %summary = alloca %Summary, align 8
  %result = alloca %Summary, align 8
  %title_sure = alloca %"char[]", align 8
  %has_title = alloca i8, align 1
  %has_title.f = alloca i64, align 8
  %retparam = alloca i8, align 1
  %0 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 0
  store %"char[]" { ptr @.str.29, i64 4 }, ptr %0, align 8
  %1 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 1
  store %"char[]" { ptr @.str.30, i64 11 }, ptr %1, align 8
  %2 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 2
  store %"char[]" { ptr @.str.31, i64 13 }, ptr %2, align 8
  %3 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 3
  store %"char[]" { ptr @.str.32, i64 12 }, ptr %3, align 8
  %4 = getelementptr inbounds [5 x %"char[]"], ptr %literal, i64 0, i64 4
  store %"char[]" { ptr @.str.33, i64 4 }, ptr %4, align 8
  %5 = insertvalue %"char[][]" undef, ptr %literal, 0
  %6 = insertvalue %"char[][]" %5, i64 5, 1
  store %"char[][]" %6, ptr %URLS, align 8
  %7 = getelementptr inbounds %"char[][]", ptr %URLS, i32 0, i32 1
  %8 = load i64, ptr %7, align 8
  store i64 %8, ptr %.anon, align 8
  store i64 0, ptr %.anon1, align 8
  br label %loop.cond

loop.cond:                                        ; preds = %phi_block12, %entry
  %9 = load i64, ptr %.anon1, align 8
  %10 = load i64, ptr %.anon, align 8
  %lt = icmp ult i64 %9, %10
  br i1 %lt, label %loop.body, label %loop.exit

loop.body:                                        ; preds = %loop.cond
  %11 = getelementptr inbounds %"char[][]", ptr %URLS, i32 0, i32 0
  %12 = load ptr, ptr %11, align 8
  %13 = load i64, ptr %.anon1, align 8
  %ptroffset = getelementptr inbounds %"char[]", ptr %12, i64 %13
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %url, ptr align 8 %ptroffset, i32 16, i1 false)
  %14 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %15 = load i64, ptr %14, align 8
  %trunc = trunc i64 %15 to i32
  %16 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 (ptr, ...) @printf(ptr @.str.34, i32 %trunc, ptr %17)
  %19 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo = load ptr, ptr %19, align 8
  %20 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi = load i64, ptr %20, align 8
  %21 = call { ptr, i8 } @test.readAndBuildSummary(ptr %lo, i64 %hi)
  store { ptr, i8 } %21, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %summary, ptr align 8 %result, i32 16, i1 false)
  %22 = call i32 (ptr, ...) @printf(ptr @.str.35)
  %23 = load ptr, ptr @__stdoutp, align 8
  call void @test.Summary.print(ptr %summary, ptr %23)
  %24 = call i32 (ptr, ...) @printf(ptr @.str.36)
  %25 = getelementptr inbounds %Summary, ptr %summary, i32 0, i32 0
  %26 = load ptr, ptr %25, align 8
  %ptrbool = icmp ne ptr %26, null
  br i1 %ptrbool, label %cond.lhs, label %cond.rhs

cond.lhs:                                         ; preds = %loop.body
  %27 = getelementptr inbounds %Summary, ptr %summary, i32 0, i32 0
  %28 = load ptr, ptr %27, align 8
  %29 = load %"char[]", ptr %28, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %loop.body
  br label %cond.phi

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %"char[]" [ %29, %cond.lhs ], [ zeroinitializer, %cond.rhs ]
  store %"char[]" %val, ptr %title_sure, align 8
  %30 = getelementptr inbounds %"char[]", ptr %title_sure, i32 0, i32 1
  %31 = load i64, ptr %30, align 8
  %trunc2 = trunc i64 %31 to i32
  %32 = getelementptr inbounds %"char[]", ptr %title_sure, i32 0, i32 0
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 (ptr, ...) @printf(ptr @.str.37, i32 %trunc2, ptr %33)
  %35 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 0
  %lo3 = load ptr, ptr %35, align 8
  %36 = getelementptr inbounds %"char[]", ptr %url, i32 0, i32 1
  %hi4 = load i64, ptr %36, align 8
  %37 = call i64 @test.readWhetherTitleNonEmpty(ptr %retparam, ptr %lo3, i64 %hi4)
  %not_err = icmp eq i64 %37, 0
  %38 = call i1 @llvm.expect.i1(i1 %not_err, i1 true)
  br i1 %38, label %after_check, label %assign_optional

assign_optional:                                  ; preds = %cond.phi
  store i64 %37, ptr %has_title.f, align 8
  br label %after_assign

after_check:                                      ; preds = %cond.phi
  %39 = load i8, ptr %retparam, align 1
  store i8 %39, ptr %has_title, align 1
  store i64 0, ptr %has_title.f, align 8
  br label %after_assign

after_assign:                                     ; preds = %after_check, %assign_optional
  %optval = load i64, ptr %has_title.f, align 8
  %not_err5 = icmp eq i64 %optval, 0
  %40 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true)
  br i1 %40, label %after_check6, label %else_block

after_check6:                                     ; preds = %after_assign
  %41 = load i8, ptr %has_title, align 1
  %42 = call ptr @test.bool_to_string(i8 zeroext %41)
  br label %phi_block

else_block:                                       ; preds = %after_assign
  %43 = load i64, ptr %has_title.f, align 8
  %44 = call ptr @test.nameFromError(i64 %43)
  br label %phi_block

phi_block:                                        ; preds = %else_block, %after_check6
  %val7 = phi ptr [ %42, %after_check6 ], [ %44, %else_block ]
  %optval8 = load i64, ptr %has_title.f, align 8
  %not_err9 = icmp eq i64 %optval8, 0
  %45 = call i1 @llvm.expect.i1(i1 %not_err9, i1 true)
  br i1 %45, label %after_check10, label %else_block11

after_check10:                                    ; preds = %phi_block
  %46 = load i8, ptr %has_title, align 1
  %47 = trunc i8 %46 to i1
  br label %phi_block12

else_block11:                                     ; preds = %phi_block
  br label %phi_block12

phi_block12:                                      ; preds = %else_block11, %after_check10
  %val13 = phi i1 [ %47, %after_check10 ], [ false, %else_block11 ]
  %ternary = select i1 %val13, ptr @.str.39, ptr @.str.40
  %48 = call i32 (ptr, ...) @printf(ptr @.str.38, ptr %val7, ptr %ternary)
  %49 = load i64, ptr %.anon1, align 8
  %add = add i64 %49, 1
  store i64 %add, ptr %.anon1, align 8
  br label %loop.cond

loop.exit:                                        ; preds = %loop.cond
  ret void
}
